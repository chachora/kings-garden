{"version":3,"sources":["components/Garden.module.css","components/NumberField.module.css","pages/MainPage.module.css","utils/garden-helper.js","components/Garden.js","components/NumberField.js","pages/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","pixelEnum","MainPage","garden","printedGarden","useMemo","reduce","result","row","i","rowResult","value","slice","gardenHelper","className","styles","container","NumberField","label","min","max","name","step","onChange","htmlFor","id","type","useState","height","width","padding","values","setValues","hanldeFieldChange","event","target","Number","calc","startWidth","startHeight","length","Array","fill","map","Math","floor","fields","Garden","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8632fbdb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Garden_container__2e0s9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NumberField_container__10yBy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fields\":\"MainPage_fields__2aL0Q\"};","const pixelEnum = [' ', '-', '|'];\n\n/**\n * Recursive method for generating garden layout\n * @param garden\n * @param startWidth\n * @param startHeight\n * @param padding\n * @returns {*}\n */\nconst calc = (garden, startWidth, startHeight, padding) => {\n  const height = garden.length;\n  const width = garden[0].length;\n\n  if (startHeight >= height / 2 || startWidth >= width / 2) return garden;\n\n  // Draw top and bottom border\n  for (let i = startWidth; i < width - startWidth; i++) {\n    garden[startHeight][i] = 1;\n    garden[height - startHeight - 1][i] = 1;\n  }\n\n  // Draw left and right border\n  for (let i = startHeight; i < height - startHeight; i++) {\n    garden[i][startWidth] = 2;\n    garden[i][width - startWidth - 1] = 2;\n  }\n\n  return calc(garden, startWidth + padding, startHeight + padding, padding);\n};\n\n/**\n * Returns 2D array with garden layout\n * @param width\n * @param height\n * @param padding\n * @returns {Array}\n */\nexport const draw = (width, height, padding) => {\n  width = width - (width % 2);\n  height = height - (height % 2);\n  if (padding <= 0 || width <= 0 || height <= 0) return [];\n  // Initialize 2D array\n  const garden = new Array(height).fill(0).map(() => new Array(width).fill(0));\n  return calc(garden, 0, 0, Math.floor(padding / 2) + 1);\n};\n\n/**\n * Returns string based on garden array\n * @param garden\n * @returns {String}\n */\nexport const print = garden => {\n  return garden\n    .reduce((result, row, i) => {\n      // Iterate each row\n      return row.reduce((rowResult, value) => {\n        // Convert value to symbol\n        return `${rowResult}${pixelEnum[value]}`;\n      }, `${result}\\n`);\n    }, '')\n    .slice(1);\n};\n","import React, { useMemo } from 'react';\nimport styles from './Garden.module.css';\nimport * as gardenHelper from '../utils/garden-helper';\n\nconst MainPage = ({ garden }) => {\n  const printedGarden = useMemo(() => gardenHelper.print(garden), [garden]);\n  return <div className={styles.container}>{printedGarden}</div>;\n};\n\nexport default MainPage;\n","import React from 'react';\nimport styles from './NumberField.module.css';\n\nconst NumberField = ({ value, label, min, max, name, step, onChange }) => {\n  return (\n    <div className={styles.container}>\n      <label htmlFor={name}>{label}</label>\n      <input\n        id={name}\n        name={name}\n        min={min}\n        max={max}\n        step={step}\n        type=\"number\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default NumberField;\n","import React, { useState, useMemo } from 'react';\nimport Garden from '../components/Garden';\nimport NumberField from '../components/NumberField';\nimport * as gardenHelper from '../utils/garden-helper';\nimport styles from './MainPage.module.css';\n\nconst MainPage = () => {\n  const [values, setValues] = useState({\n    height: 20,\n    width: 20,\n    padding: 4,\n  });\n\n  const hanldeFieldChange = event => {\n    setValues({ ...values, [event.target.name]: Number(event.target.value) });\n  };\n\n  const garden = useMemo(\n    () => gardenHelper.draw(values.width, values.height, values.padding),\n    [values]\n  );\n\n  return (\n    <div>\n      <h2>King's Garden</h2>\n      <div className={styles.fields}>\n        <NumberField\n          name=\"width\"\n          value={values.width}\n          label={'Width'}\n          min={20}\n          step={2}\n          onChange={hanldeFieldChange}\n        />\n        <NumberField\n          name=\"height\"\n          value={values.height}\n          label={'Height'}\n          min={20}\n          step={2}\n          onChange={hanldeFieldChange}\n        />\n        <NumberField\n          name=\"padding\"\n          value={values.padding}\n          label={'Padding'}\n          min={4}\n          step={2}\n          onChange={hanldeFieldChange}\n        />\n      </div>\n      <Garden garden={garden} />\n    </div>\n  );\n};\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from './pages/MainPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}